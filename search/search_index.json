{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This is a loopback4 extension that provides Sequelize's query builder at repository level in any loopback 4 application. It has zero learning curve as it follows similar interface as <code>DefaultCrudRepository</code>. For relational databases, Sequelize is a popular ORM of choice.</p> <p>For pending features, refer to the Limitations section below.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install this extension in your Loopback 4 project, run the following command:</p> <pre><code>npm install loopback4-sequelize\n</code></pre> <p>You'll also need to install the driver for your preferred database:</p> <pre><code># One of the following:\nnpm install --save pg pg-hstore # Postgres\nnpm install --save mysql2\nnpm install --save mariadb\nnpm install --save sqlite3\nnpm install --save tedious # Microsoft SQL Server\nnpm install --save oracledb # Oracle Database\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>You can watch a video overview of this extension by clicking here.</p> <p>Both newly developed and existing projects can benefit from the extension by simply changing the parent classes in the target Data Source and Repositories.</p>"},{"location":"#step-1-configure-datasource","title":"Step 1: Configure DataSource","text":"<p>Change the parent class from <code>juggler.DataSource</code> to <code>SequelizeDataSource</code> like below.</p> pg.datasource.ts<pre><code>// ...\nimport {SequelizeDataSource} from 'loopback4-sequelize';\n// ...\nexport class PgDataSource\nextends SequelizeDataSource\nimplements LifeCycleObserver {\n// ...\n}\n</code></pre> <p><code>SequelizeDataSource</code> accepts commonly used config in the same way as loopback did. So in most cases you won't need to change your existing configuration. But if you want to use sequelize specific options pass them in <code>sequelizeOptions</code> like below:</p> <pre><code>let config = {\nname: 'db',\nconnector: 'postgresql',\nsequelizeOptions: {\nusername: 'postgres',\npassword: 'secret',\ndialectOptions: {\nssl: {\nrejectUnauthorized: false,\nca: fs.readFileSync('/path/to/root.crt').toString(),\n},\n},\n},\n};\n</code></pre> <p>Note: Options provided in <code>sequelizeOptions</code> will take priority over others, For eg. if you have password specified in both <code>config.password</code> and <code>config.password.sequelizeOptions</code> the latter one will be used.</p>"},{"location":"#step-2-configure-repository","title":"Step 2: Configure Repository","text":"<p>Change the parent class from <code>DefaultCrudRepository</code> to <code>SequelizeCrudRepository</code> like below.</p> your.repository.ts<pre><code>// ...\nimport {SequelizeCrudRepository} from 'loopback4-sequelize';\nexport class YourRepository extends SequelizeCrudRepository&lt;\nYourModel,\ntypeof YourModel.prototype.id,\nYourModelRelations\n&gt; {\n// ...\n}\n</code></pre>"},{"location":"#relations","title":"Relations","text":""},{"location":"#supported-loopback-relations","title":"Supported Loopback Relations","text":"<p>With <code>SequelizeCrudRepository</code>, you can utilize following relations without any additional configuration:</p> <ol> <li>HasMany Relation</li> <li>BelongsTo Relation</li> <li>HasOne Relation</li> <li>HasManyThrough Relation</li> <li>ReferencesMany Relation</li> </ol> <p>The default relation configuration, generated using the lb4 relation command (i.e. inclusion resolvers in the repository and property decorators in the model), remain unchanged.</p>"},{"location":"#inner-join","title":"INNER JOIN","text":"<p>Check the demo video of using inner joins here: https://youtu.be/ZrUxIk63oRc?t=76</p> <p>When using <code>SequelizeCrudRepository</code>, the <code>find()</code>, <code>findOne()</code>, and <code>findById()</code> methods accept a new option called <code>required</code> in the include filter. Setting this option to <code>true</code> will result in an inner join query that explicitly requires the specified condition for the child model. If the row does not meet this condition, it will not be fetched and returned.</p> <p>An example of the filter object might look like this to fetch the books who contains \"Art\" in their title, which belongs to category \"Programming\":</p> <pre><code>{\n\"where\": {\"title\": {\"like\": \"%Art%\"}},\n\"include\": [\n{\n\"relation\": \"category\",\n\"scope\": {\n\"where\": {\n\"name\": \"Programming\"\n}\n},\n\"required\": true // \ud83d\udc48\n}\n]\n}\n</code></pre>"},{"location":"#sql-transactions","title":"SQL Transactions","text":"<p>A Sequelize repository can perform operations in a transaction using the <code>beginTransaction()</code> method.</p>"},{"location":"#isolation-levels","title":"Isolation levels","text":"<p>When you call <code>beginTransaction()</code>, you can optionally specify a transaction isolation level. It support the following isolation levels:</p> <ul> <li><code>Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED</code> (default)</li> <li><code>Transaction.ISOLATION_LEVELS.READ_COMMITTED</code></li> <li><code>Transaction.ISOLATION_LEVELS.REPEATABLE_READ</code></li> <li><code>Transaction.ISOLATION_LEVELS.SERIALIZABLE</code></li> </ul>"},{"location":"#options","title":"Options","text":"<p>Following are the supported options:</p> <pre><code>{\nautocommit?: boolean;\nisolationLevel?: Transaction.ISOLATION_LEVELS;\ntype?: Transaction.TYPES;\ndeferrable?: string | Deferrable;\n/**\n   * Parent transaction.\n   */\ntransaction?: Transaction | null;\n}\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>// Get repository instances. In a typical application, instances are injected\n// via dependency injection using `@repository` decorator.\nconst userRepo = await app.getRepository(UserRepository);\n// Begin a new transaction.\n// It's also possible to call `userRepo.dataSource.beginTransaction` instead.\nconst tx = await userRepo.beginTransaction({\nisolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE,\n});\ntry {\n// Then, we do some calls passing this transaction as an option:\nconst user = await userRepo.create(\n{\nfirstName: 'Jon',\nlastName: 'Doe',\n},\n{transaction: tx},\n);\nawait userRepo.updateById(\nuser.id,\n{\nfirstName: 'John',\n},\n{transaction: tx},\n);\n// If the execution reaches this line, no errors were thrown.\n// We commit the transaction.\nawait tx.commit();\n} catch (error) {\n// If the execution reaches this line, an error was thrown.\n// We rollback the transaction.\nawait tx.rollback();\n}\n</code></pre> <p>Switching from loopback defaults to sequelize transaction is as simple as this commit in loopback4-sequelize-transaction-example.</p>"},{"location":"#debug-strings-reference","title":"Debug strings reference","text":"<p>There are three built-in debug strings available in this extension to aid in debugging. To learn more about how to use them, see this page.</p> String Description Datasource loopback:sequelize:datasource Database Connections logs loopback:sequelize:queries Logs Executed SQL Queries and Parameters Repository loopback:sequelize:modelbuilder Logs Translation of Loopback Models Into Sequelize Supported Definitions. Helpful When Debugging Datatype Issues"},{"location":"#limitations","title":"Limitations","text":"<p>Please note, the current implementation does not support the following:</p> <ol> <li>Loopback Migrations (via default <code>migrate.ts</code>). Though you're good if using external packages like <code>db-migrate</code>.</li> </ol> <p>Community contribution is welcome.</p>"},{"location":"#feedback","title":"Feedback","text":"<p>If you've noticed a bug or have a question or have a feature request, search the issue tracker to see if someone else in the community has already created a ticket. If not, go ahead and make one! All feature requests are welcome. Implementation time may vary. Feel free to contribute the same, if you can. If you think this extension is useful, please star it. Appreciation really helps in keeping this project alive.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Please read CONTRIBUTING.md for details on the process for submitting pull requests to us.</p>"},{"location":"#code-of-conduct","title":"Code of conduct","text":"<p>Code of conduct guidelines here.</p>"},{"location":"#license","title":"License","text":"<p>MIT</p>"},{"location":"api-reference/","title":"Index","text":"<p>loopback4-sequelize</p>"},{"location":"api-reference/#loopback4-sequelize","title":"loopback4-sequelize","text":""},{"location":"api-reference/#table-of-contents","title":"Table of contents","text":""},{"location":"api-reference/#namespaces","title":"Namespaces","text":"<ul> <li>LB4SequelizeComponentBindings</li> <li>Transaction</li> </ul>"},{"location":"api-reference/#classes","title":"Classes","text":"<ul> <li>LB4SequelizeComponent</li> <li>SequelizeCrudRepository</li> <li>SequelizeDataSource</li> <li>Transaction</li> </ul>"},{"location":"api-reference/#interfaces","title":"Interfaces","text":"<ul> <li>LB4SequelizeComponentOptions</li> </ul>"},{"location":"api-reference/#type-aliases","title":"Type Aliases","text":"<ul> <li>SequelizeDataSourceConfig</li> </ul>"},{"location":"api-reference/#variables","title":"Variables","text":"<ul> <li>DEFAULT_LOOPBACK4_SEQUELIZE_OPTIONS</li> </ul>"},{"location":"api-reference/#type-aliases_1","title":"Type Aliases","text":""},{"location":"api-reference/#sequelizedatasourceconfig","title":"SequelizeDataSourceConfig","text":"<p>\u01ac SequelizeDataSourceConfig: { <code>connector?</code>: <code>SupportedLoopbackConnectors</code> ; <code>name?</code>: <code>string</code> ; <code>sequelizeOptions?</code>: <code>SequelizeOptions</code> ; <code>url?</code>: <code>string</code> ; <code>user?</code>: <code>string</code>  } &amp; <code>AnyObject</code></p>"},{"location":"api-reference/#defined-in","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:249</p>"},{"location":"api-reference/#variables_1","title":"Variables","text":""},{"location":"api-reference/#default_loopback4_sequelize_options","title":"DEFAULT_LOOPBACK4_SEQUELIZE_OPTIONS","text":"<p>\u2022 <code>Const</code> DEFAULT_LOOPBACK4_SEQUELIZE_OPTIONS: <code>LB4SequelizeComponentOptions</code> = <code>{}</code></p> <p>Default options for the component</p>"},{"location":"api-reference/#defined-in_1","title":"Defined in","text":"<p>src/types.ts:11</p>"},{"location":"api-reference/classes/LB4SequelizeComponent/","title":"LB4SequelizeComponent","text":"<p>loopback4-sequelize / LB4SequelizeComponent</p>"},{"location":"api-reference/classes/LB4SequelizeComponent/#class-lb4sequelizecomponent","title":"Class: LB4SequelizeComponent","text":""},{"location":"api-reference/classes/LB4SequelizeComponent/#implements","title":"Implements","text":"<ul> <li><code>Component</code></li> </ul>"},{"location":"api-reference/classes/LB4SequelizeComponent/#table-of-contents","title":"Table of contents","text":""},{"location":"api-reference/classes/LB4SequelizeComponent/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"api-reference/classes/LB4SequelizeComponent/#constructors_1","title":"Constructors","text":""},{"location":"api-reference/classes/LB4SequelizeComponent/#constructor","title":"constructor","text":"<p>\u2022 new LB4SequelizeComponent()</p>"},{"location":"api-reference/classes/LB4SequelizeComponent/#defined-in","title":"Defined in","text":"<p>src/component.ts:9</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/","title":"SequelizeCrudRepository","text":"<p>loopback4-sequelize / SequelizeCrudRepository</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#class-sequelizecrudrepositoryt-id-relations","title":"Class: SequelizeCrudRepository&lt;T, ID, Relations&gt;","text":"<p>Sequelize implementation of CRUD repository to be used with default loopback entities and SequelizeDataSource for SQL Databases</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Entity</code> <code>ID</code> <code>ID</code> <code>Relations</code> extends <code>object</code> = {}"},{"location":"api-reference/classes/SequelizeCrudRepository/#implements","title":"Implements","text":"<ul> <li><code>EntityCrudRepository</code>&lt;<code>T</code>, <code>ID</code>, <code>Relations</code>&gt;</li> </ul>"},{"location":"api-reference/classes/SequelizeCrudRepository/#table-of-contents","title":"Table of contents","text":""},{"location":"api-reference/classes/SequelizeCrudRepository/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"api-reference/classes/SequelizeCrudRepository/#properties","title":"Properties","text":"<ul> <li>DB_SPECIFIC_SETTINGS_KEYS</li> <li>DEFAULT_ORDER_STYLE</li> <li>NANO_ID_LENGTH</li> <li>dataSource</li> <li>defaultFnRegistry</li> <li>entityClass</li> <li>inclusionResolvers</li> <li>sequelizeModel</li> </ul>"},{"location":"api-reference/classes/SequelizeCrudRepository/#methods","title":"Methods","text":"<ul> <li>beginTransaction</li> <li>buildSequelizeAttributeFilter</li> <li>buildSequelizeIncludeFilter</li> <li>buildSequelizeOrder</li> <li>buildSequelizeWhere</li> <li>count</li> <li>create</li> <li>createAll</li> <li>createBelongsToAccessorFor</li> <li>createHasManyRepositoryFactoryFor</li> <li>createHasManyThroughRepositoryFactoryFor</li> <li>createHasOneRepositoryFactoryFor</li> <li>createReferencesManyAccessorFor</li> <li>delete</li> <li>deleteAll</li> <li>deleteById</li> <li>excludeHiddenProps</li> <li>execute</li> <li>exists</li> <li>find</li> <li>findById</li> <li>findOne</li> <li>getDefaultFnRegistry</li> <li>getSequelizeModel</li> <li>getSequelizeModelAttributes</li> <li>getSequelizeOperator</li> <li>getTableName</li> <li>includeReferencesIfRequested</li> <li>isInclusionAllowed</li> <li>registerInclusionResolver</li> <li>replaceById</li> <li>save</li> <li>syncLoadedSequelizeModels</li> <li>syncSequelizeModel</li> <li>toEntities</li> <li>update</li> <li>updateAll</li> <li>updateById</li> </ul>"},{"location":"api-reference/classes/SequelizeCrudRepository/#constructors_1","title":"Constructors","text":""},{"location":"api-reference/classes/SequelizeCrudRepository/#constructor","title":"constructor","text":"<p>\u2022 new SequelizeCrudRepository&lt;<code>T</code>, <code>ID</code>, <code>Relations</code>&gt;(<code>entityClass</code>, <code>dataSource</code>)</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#type-parameters_1","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Entity</code>&lt;<code>T</code>&gt; <code>ID</code> <code>ID</code> <code>Relations</code> extends <code>object</code> = {}"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters","title":"Parameters","text":"Name Type <code>entityClass</code> typeof <code>Entity</code> &amp; { <code>prototype</code>: <code>T</code>  } <code>dataSource</code> <code>SequelizeDataSource</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:77</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#properties_1","title":"Properties","text":""},{"location":"api-reference/classes/SequelizeCrudRepository/#db_specific_settings_keys","title":"DB_SPECIFIC_SETTINGS_KEYS","text":"<p>\u2022 <code>Readonly</code> DB_SPECIFIC_SETTINGS_KEYS: readonly [<code>\"postgresql\"</code>, <code>\"mysql\"</code>, <code>\"sqlite3\"</code>]</p> <p>Object keys used in models for set database specific settings. Example: In model property definition one can use postgresql dataType as float <code>{   type: 'number',   postgresql: {     dataType: 'float',     precision: 20,     scale: 4,   }, }</code></p> <p>This array of keys is used while building model definition for sequelize.</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_1","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:107</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#default_order_style","title":"DEFAULT_ORDER_STYLE","text":"<p>\u2022 <code>Readonly</code> DEFAULT_ORDER_STYLE: <code>\"ASC\"</code></p> <p>Default <code>order</code> filter style if only column name is specified</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_2","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:91</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#nano_id_length","title":"NANO_ID_LENGTH","text":"<p>\u2022 NANO_ID_LENGTH: <code>number</code> = <code>9</code></p> <p>Length of the <code>nanoid</code> generated for defaultFn's <code>shortid</code> and <code>nanoid</code> aliases.</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_3","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:116</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#datasource","title":"dataSource","text":"<p>\u2022 dataSource: <code>SequelizeDataSource</code></p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_4","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:81</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defaultfnregistry","title":"defaultFnRegistry","text":"<p>\u2022 <code>Protected</code> defaultFnRegistry: <code>Record</code>&lt;<code>string</code>, () =&gt; <code>string</code> | <code>number</code>&gt;</p> <p>The alias registry for <code>defaultFn</code> option used in model property definition.</p> <p>See: https://loopback.io/doc/en/lb4/Model.html#property-decorator</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_5","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:123</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#entityclass","title":"entityClass","text":"<p>\u2022 entityClass: typeof <code>Entity</code> &amp; { <code>prototype</code>: <code>T</code>  }</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of","title":"Implementation of","text":"<p>EntityCrudRepository.entityClass</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_6","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:78</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#inclusionresolvers","title":"inclusionResolvers","text":"<p>\u2022 <code>Readonly</code> inclusionResolvers: <code>Map</code>&lt;<code>string</code>, <code>InclusionResolver</code>&lt;<code>T</code>, <code>Entity</code>&gt;&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_1","title":"Implementation of","text":"<p>EntityCrudRepository.inclusionResolvers</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_7","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:136</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#sequelizemodel","title":"sequelizeModel","text":"<p>\u2022 sequelizeModel: <code>ModelStatic</code>&lt;<code>Model</code>&lt;<code>T</code>, <code>T</code>&gt;&gt;</p> <p>Sequelize Model Instance created from the model definition received from the <code>entityClass</code></p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_8","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:144</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#methods_1","title":"Methods","text":""},{"location":"api-reference/classes/SequelizeCrudRepository/#begintransaction","title":"beginTransaction","text":"<p>\u25b8 beginTransaction(<code>options?</code>): <code>Promise</code>&lt;<code>Transaction</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_1","title":"Parameters","text":"Name Type <code>options?</code> <code>TransactionOptions</code> | <code>ISOLATION_LEVELS</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Transaction</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_9","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:1366</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#buildsequelizeattributefilter","title":"buildSequelizeAttributeFilter","text":"<p>\u25b8 <code>Protected</code> buildSequelizeAttributeFilter(<code>fields?</code>): <code>undefined</code> | <code>FindAttributeOptions</code></p> <p>Get Sequelize <code>attributes</code> filter value from <code>fields</code> of loopback.</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_2","title":"Parameters","text":"Name Type Description <code>fields?</code> <code>Fields</code>&lt;<code>AnyObject</code>&gt; Loopback styles <code>fields</code> options. eg. <code>[\"name\", \"age\"]</code>, <code>{ id: false }</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_1","title":"Returns","text":"<p><code>undefined</code> | <code>FindAttributeOptions</code></p> <p>Sequelize Compatible Object/Array based on the fields provided. eg. <code>{ \"exclude\": [\"id\"] }</code></p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_10","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:416</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#buildsequelizeincludefilter","title":"buildSequelizeIncludeFilter","text":"<p>\u25b8 <code>Protected</code> buildSequelizeIncludeFilter(<code>inclusionFilters?</code>, <code>sourceModel?</code>): <code>Includeable</code>[]</p> <p>Build Sequelize compatible <code>include</code> filter</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_3","title":"Parameters","text":"Name Type Description <code>inclusionFilters?</code> <code>Object</code>[] loopback style <code>where</code> condition <code>sourceModel?</code> <code>ModelStatic</code>&lt;<code>Model</code>&lt;<code>T</code>, <code>T</code>&gt;&gt; sequelize model instance"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_2","title":"Returns","text":"<p><code>Includeable</code>[]</p> <p>Sequelize compatible <code>Includeable</code> array</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_11","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:505</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#buildsequelizeorder","title":"buildSequelizeOrder","text":"<p>\u25b8 <code>Protected</code> buildSequelizeOrder(<code>order?</code>): <code>undefined</code> | <code>Order</code></p> <p>Get Sequelize Order filter value from loopback style order value</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_4","title":"Parameters","text":"Name Type Description <code>order?</code> <code>string</code> | <code>string</code>[] Sorting order in loopback style filter. eg. <code>title ASC</code>, <code>[\"id DESC\", \"age ASC\"]</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_3","title":"Returns","text":"<p><code>undefined</code> | <code>Order</code></p> <p>Sequelize compatible order filter value</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_12","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:467</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#buildsequelizewhere","title":"buildSequelizeWhere","text":"<p>\u25b8 <code>Protected</code> buildSequelizeWhere&lt;<code>MT</code>&gt;(<code>where?</code>): <code>WhereOptions</code>&lt;<code>MT</code>&gt;</p> <p>Build Sequelize compatible where condition object</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#type-parameters_2","title":"Type parameters","text":"Name Type <code>MT</code> extends <code>Entity</code>&lt;<code>MT</code>&gt;"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_5","title":"Parameters","text":"Name Type Description <code>where?</code> <code>Where</code>&lt;<code>MT</code>&gt; loopback style <code>where</code> condition"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_4","title":"Returns","text":"<p><code>WhereOptions</code>&lt;<code>MT</code>&gt;</p> <p>Sequelize compatible where options to be used in queries</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_13","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:602</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#count","title":"count","text":"<p>\u25b8 count(<code>where?</code>, <code>options?</code>): <code>Promise</code>&lt;<code>Count</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_6","title":"Parameters","text":"Name Type <code>where?</code> <code>Where</code>&lt;<code>T</code>&gt; <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Count</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_2","title":"Implementation of","text":"<p>EntityCrudRepository.count</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_14","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:348</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#create","title":"create","text":"<p>\u25b8 create(<code>entity</code>, <code>options?</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_7","title":"Parameters","text":"Name Type <code>entity</code> <code>DataObject</code>&lt;<code>T</code>&gt; <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_3","title":"Implementation of","text":"<p>EntityCrudRepository.create</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_15","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:146</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#createall","title":"createAll","text":"<p>\u25b8 createAll(<code>entities</code>, <code>options?</code>): <code>Promise</code>&lt;<code>T</code>[]&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_8","title":"Parameters","text":"Name Type <code>entities</code> <code>DataObject</code>&lt;<code>T</code>&gt;[] <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_7","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code>[]&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_4","title":"Implementation of","text":"<p>EntityCrudRepository.createAll</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_16","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:154</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#createbelongstoaccessorfor","title":"createBelongsToAccessorFor","text":"<p>\u25b8 <code>Protected</code> createBelongsToAccessorFor&lt;<code>Target</code>, <code>TargetId</code>&gt;(<code>relationName</code>, <code>targetRepositoryGetter</code>): <code>BelongsToAccessor</code>&lt;<code>Target</code>, <code>ID</code>&gt;</p> <p>Function to create a belongs to accessor</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#type-parameters_3","title":"Type parameters","text":"Name Type <code>Target</code> extends <code>Entity</code>&lt;<code>Target</code>&gt; <code>TargetId</code> <code>TargetId</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_9","title":"Parameters","text":"Name Type Description <code>relationName</code> <code>string</code> Name of the relation defined on the source model <code>targetRepositoryGetter</code> <code>Getter</code>&lt;<code>EntityCrudRepository</code>&lt;<code>Target</code>, <code>TargetId</code>, {}&gt;&gt; | { <code>[repoType: string]</code>: <code>Getter</code>&lt;<code>EntityCrudRepository</code>&lt;<code>Target</code>, <code>TargetId</code>&gt;&gt;;  } -"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_8","title":"Returns","text":"<p><code>BelongsToAccessor</code>&lt;<code>Target</code>, <code>ID</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_17","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:1243</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#createhasmanyrepositoryfactoryfor","title":"createHasManyRepositoryFactoryFor","text":"<p>\u25b8 <code>Protected</code> createHasManyRepositoryFactoryFor&lt;<code>Target</code>, <code>TargetID</code>, <code>ForeignKeyType</code>&gt;(<code>relationName</code>, <code>targetRepositoryGetter</code>): <code>HasManyRepositoryFactory</code>&lt;<code>Target</code>, <code>ForeignKeyType</code>&gt;</p> <p>Function to create a constrained relation repository factory</p> <p><code>Example</code></p> <pre><code>class CustomerRepository extends SequelizeCrudRepository&lt;\nCustomer,\ntypeof Customer.prototype.id,\nCustomerRelations\n&gt; {\npublic readonly orders: HasManyRepositoryFactory&lt;Order, typeof Customer.prototype.id&gt;;\nconstructor(\nprotected db: SequelizeDataSource,\norderRepository: EntityCrudRepository&lt;Order, typeof Order.prototype.id&gt;,\n) {\nsuper(Customer, db);\nthis.orders = this.createHasManyRepositoryFactoryFor(\n'orders',\norderRepository,\n);\n}\n}\n</code></pre>"},{"location":"api-reference/classes/SequelizeCrudRepository/#type-parameters_4","title":"Type parameters","text":"Name Type <code>Target</code> extends <code>Entity</code>&lt;<code>Target</code>&gt; <code>TargetID</code> <code>TargetID</code> <code>ForeignKeyType</code> <code>ForeignKeyType</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_10","title":"Parameters","text":"Name Type Description <code>relationName</code> <code>string</code> Name of the relation defined on the source model <code>targetRepositoryGetter</code> <code>Getter</code>&lt;<code>EntityCrudRepository</code>&lt;<code>Target</code>, <code>TargetID</code>, {}&gt;&gt; -"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_9","title":"Returns","text":"<p><code>HasManyRepositoryFactory</code>&lt;<code>Target</code>, <code>ForeignKeyType</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_18","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:1222</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#createhasmanythroughrepositoryfactoryfor","title":"createHasManyThroughRepositoryFactoryFor","text":"<p>\u25b8 <code>Protected</code> createHasManyThroughRepositoryFactoryFor&lt;<code>Target</code>, <code>TargetID</code>, <code>Through</code>, <code>ThroughID</code>, <code>ForeignKeyType</code>&gt;(<code>relationName</code>, <code>targetRepositoryGetter</code>, <code>throughRepositoryGetter</code>): <code>HasManyThroughRepositoryFactory</code>&lt;<code>Target</code>, <code>TargetID</code>, <code>Through</code>, <code>ForeignKeyType</code>&gt;</p> <p>Function to create a constrained hasManyThrough relation repository factory</p> <p><code>Example</code></p> <pre><code>class CustomerRepository extends SequelizeCrudRepository&lt;\nCustomer,\ntypeof Customer.prototype.id,\nCustomerRelations\n&gt; {\npublic readonly cartItems: HasManyRepositoryFactory&lt;CartItem, typeof Customer.prototype.id&gt;;\nconstructor(\nprotected db: SequelizeDataSource,\ncartItemRepository: EntityCrudRepository&lt;CartItem, typeof, CartItem.prototype.id&gt;,\nthroughRepository: EntityCrudRepository&lt;Through, typeof Through.prototype.id&gt;,\n) {\nsuper(Customer, db);\nthis.cartItems = this.createHasManyThroughRepositoryFactoryFor(\n'cartItems',\ncartItemRepository,\n);\n}\n}\n</code></pre>"},{"location":"api-reference/classes/SequelizeCrudRepository/#type-parameters_5","title":"Type parameters","text":"Name Type <code>Target</code> extends <code>Entity</code>&lt;<code>Target</code>&gt; <code>TargetID</code> <code>TargetID</code> <code>Through</code> extends <code>Entity</code>&lt;<code>Through</code>&gt; <code>ThroughID</code> <code>ThroughID</code> <code>ForeignKeyType</code> <code>ForeignKeyType</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_11","title":"Parameters","text":"Name Type Description <code>relationName</code> <code>string</code> Name of the relation defined on the source model <code>targetRepositoryGetter</code> <code>Getter</code>&lt;<code>EntityCrudRepository</code>&lt;<code>Target</code>, <code>TargetID</code>, {}&gt;&gt; | { <code>[repoType: string]</code>: <code>Getter</code>&lt;<code>EntityCrudRepository</code>&lt;<code>Target</code>, <code>TargetID</code>&gt;&gt;;  } - <code>throughRepositoryGetter</code> <code>Getter</code>&lt;<code>EntityCrudRepository</code>&lt;<code>Through</code>, <code>ThroughID</code>, {}&gt;&gt; -"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_10","title":"Returns","text":"<p><code>HasManyThroughRepositoryFactory</code>&lt;<code>Target</code>, <code>TargetID</code>, <code>Through</code>, <code>ForeignKeyType</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_19","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:1314</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#createhasonerepositoryfactoryfor","title":"createHasOneRepositoryFactoryFor","text":"<p>\u25b8 <code>Protected</code> createHasOneRepositoryFactoryFor&lt;<code>Target</code>, <code>TargetID</code>, <code>ForeignKeyType</code>&gt;(<code>relationName</code>, <code>targetRepositoryGetter</code>): <code>HasOneRepositoryFactory</code>&lt;<code>Target</code>, <code>ForeignKeyType</code>&gt;</p> <p>Function to create a constrained hasOne relation repository factory</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#type-parameters_6","title":"Type parameters","text":"Name Type <code>Target</code> extends <code>Entity</code>&lt;<code>Target</code>&gt; <code>TargetID</code> <code>TargetID</code> <code>ForeignKeyType</code> <code>ForeignKeyType</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_12","title":"Parameters","text":"Name Type Description <code>relationName</code> <code>string</code> Name of the relation defined on the source model <code>targetRepositoryGetter</code> <code>Getter</code>&lt;<code>EntityCrudRepository</code>&lt;<code>Target</code>, <code>TargetID</code>, {}&gt;&gt; | { <code>[repoType: string]</code>: <code>Getter</code>&lt;<code>EntityCrudRepository</code>&lt;<code>Target</code>, <code>TargetID</code>&gt;&gt;;  } -"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_11","title":"Returns","text":"<p><code>HasOneRepositoryFactory</code>&lt;<code>Target</code>, <code>ForeignKeyType</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_20","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:1265</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#createreferencesmanyaccessorfor","title":"createReferencesManyAccessorFor","text":"<p>\u25b8 <code>Protected</code> createReferencesManyAccessorFor&lt;<code>Target</code>, <code>TargetId</code>&gt;(<code>relationName</code>, <code>targetRepoGetter</code>): <code>ReferencesManyAccessor</code>&lt;<code>Target</code>, <code>ID</code>&gt;</p> <p>Function to create a references many accessor</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#type-parameters_7","title":"Type parameters","text":"Name Type <code>Target</code> extends <code>Entity</code>&lt;<code>Target</code>&gt; <code>TargetId</code> <code>TargetId</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_13","title":"Parameters","text":"Name Type Description <code>relationName</code> <code>string</code> Name of the relation defined on the source model <code>targetRepoGetter</code> <code>Getter</code>&lt;<code>EntityCrudRepository</code>&lt;<code>Target</code>, <code>TargetId</code>, {}&gt;&gt; -"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_12","title":"Returns","text":"<p><code>ReferencesManyAccessor</code>&lt;<code>Target</code>, <code>ID</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_21","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:1354</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#delete","title":"delete","text":"<p>\u25b8 delete(<code>entity</code>, <code>options?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_14","title":"Parameters","text":"Name Type <code>entity</code> <code>T</code> <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_13","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_5","title":"Implementation of","text":"<p>EntityCrudRepository.delete</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_22","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:225</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#deleteall","title":"deleteAll","text":"<p>\u25b8 deleteAll(<code>where?</code>, <code>options?</code>): <code>Promise</code>&lt;<code>Count</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_15","title":"Parameters","text":"Name Type <code>where?</code> <code>Where</code>&lt;<code>T</code>&gt; <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_14","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Count</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_6","title":"Implementation of","text":"<p>EntityCrudRepository.deleteAll</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_23","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:318</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#deletebyid","title":"deleteById","text":"<p>\u25b8 deleteById(<code>id</code>, <code>options?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_16","title":"Parameters","text":"Name Type <code>id</code> <code>ID</code> <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_15","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_7","title":"Implementation of","text":"<p>EntityCrudRepository.deleteById</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_24","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:329</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#excludehiddenprops","title":"excludeHiddenProps","text":"<p>\u25b8 <code>Protected</code> excludeHiddenProps(<code>entity</code>): <code>T</code> &amp; <code>Relations</code></p> <p>Remove hidden properties specified in model from response body. (See:  https://github.com/sourcefuse/loopback4-sequelize/issues/3)</p> <p><code>Deprecated</code></p> <p>To exclude hidden props from a model call the <code>.toJSON()</code> method on it Which is available for models returned from <code>create</code>, <code>find</code> or <code>findById</code> method. Alternative it can be use by manually instantiating the model using <code>new EntityClass(data).toJSON()</code>.</p> <p>This function will be removed in next major release.</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_17","title":"Parameters","text":"Name Type Description <code>entity</code> <code>T</code> &amp; <code>Relations</code> normalized entity. You can use <code>entity.toJSON()</code>'s value"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_16","title":"Returns","text":"<p><code>T</code> &amp; <code>Relations</code></p> <p>normalized entity excluding the hiddenProperties</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_25","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:945</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#execute","title":"execute","text":"<p>\u25b8 execute(<code>command</code>, <code>parameters?</code>, <code>options?</code>): <code>Promise</code>&lt;<code>AnyObject</code>&gt;</p> <p>Execute a SQL command.</p> <p>WARNING: In general, it is always better to perform database actions through repository methods. Directly executing SQL may lead to unexpected results, corrupted data, security vulnerabilities and other issues.</p> <p><code>Example</code></p> <pre><code>// MySQL\nconst result = await repo.execute(\n'SELECT * FROM Products WHERE size &gt; ?',\n[42]\n);\n// PostgreSQL\nconst result = await repo.execute(\n'SELECT * FROM Products WHERE size &gt; $1',\n[42]\n);\n</code></pre>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_18","title":"Parameters","text":"Name Type Description <code>command</code> <code>Command</code> A parameterized SQL command or query. <code>parameters?</code> <code>AnyObject</code> | <code>PositionalParameters</code> List of parameter values to use. <code>options?</code> <code>AnyObject</code> Additional options, for example <code>transaction</code>."},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_17","title":"Returns","text":"<p><code>Promise</code>&lt;<code>AnyObject</code>&gt;</p> <p>A promise which resolves to the command output. The output type (data structure) is database specific and often depends on the command executed.</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_8","title":"Implementation of","text":"<p>EntityCrudRepository.execute</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_26","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:386</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#exists","title":"exists","text":"<p>\u25b8 exists(<code>id</code>, <code>_options?</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_19","title":"Parameters","text":"Name Type <code>id</code> <code>ID</code> <code>_options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_18","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_9","title":"Implementation of","text":"<p>EntityCrudRepository.exists</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_27","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:166</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#find","title":"find","text":"<p>\u25b8 find(<code>filter?</code>, <code>options?</code>): <code>Promise</code>&lt;<code>T</code> &amp; <code>Relations</code>[]&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_20","title":"Parameters","text":"Name Type <code>filter?</code> <code>Filter</code>&lt;<code>T</code>&gt; <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_19","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code> &amp; <code>Relations</code>[]&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_10","title":"Implementation of","text":"<p>EntityCrudRepository.find</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_28","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:229</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#findbyid","title":"findById","text":"<p>\u25b8 findById(<code>id</code>, <code>filter?</code>, <code>options?</code>): <code>Promise</code>&lt;<code>T</code> &amp; <code>Relations</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_21","title":"Parameters","text":"Name Type <code>id</code> <code>ID</code> <code>filter?</code> <code>FilterExcludingWhere</code>&lt;<code>T</code>&gt; <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_20","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code> &amp; <code>Relations</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_11","title":"Implementation of","text":"<p>EntityCrudRepository.findById</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_29","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:276</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#findone","title":"findOne","text":"<p>\u25b8 findOne(<code>filter?</code>, <code>options?</code>): <code>Promise</code>&lt;<code>null</code> | <code>T</code> &amp; <code>Relations</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_22","title":"Parameters","text":"Name Type <code>filter?</code> <code>Filter</code>&lt;<code>T</code>&gt; <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_21","title":"Returns","text":"<p><code>Promise</code>&lt;<code>null</code> | <code>T</code> &amp; <code>Relations</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_30","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:250</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#getdefaultfnregistry","title":"getDefaultFnRegistry","text":"<p>\u25b8 <code>Protected</code> getDefaultFnRegistry(): <code>Record</code>&lt;<code>string</code>, () =&gt; <code>string</code> | <code>number</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_22","title":"Returns","text":"<p><code>Record</code>&lt;<code>string</code>, () =&gt; <code>string</code> | <code>number</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_31","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:132</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#getsequelizemodel","title":"getSequelizeModel","text":"<p>\u25b8 getSequelizeModel(<code>entityClass?</code>): <code>ModelCtor</code>&lt;<code>Model</code>&lt;<code>any</code>, <code>any</code>&gt;&gt; | <code>ModelCtor</code>&lt;<code>SequelizeModel</code>&gt;</p> <p>Get Sequelize Model</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_23","title":"Parameters","text":"Name Type <code>entityClass</code> typeof <code>Entity</code> &amp; { <code>prototype</code>: <code>T</code>  }"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_23","title":"Returns","text":"<p><code>ModelCtor</code>&lt;<code>Model</code>&lt;<code>any</code>, <code>any</code>&gt;&gt; | <code>ModelCtor</code>&lt;<code>SequelizeModel</code>&gt;</p> <p>Sequelize Model Instance based on the definitions from <code>entityClass</code></p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_32","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:661</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#getsequelizemodelattributes","title":"getSequelizeModelAttributes","text":"<p>\u25b8 <code>Protected</code> getSequelizeModelAttributes(<code>definition</code>): <code>ModelAttributes</code>&lt;<code>SequelizeModel</code>, <code>any</code>&gt;</p> <p>Get Sequelize Model Attributes</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_24","title":"Parameters","text":"Name Type Description <code>definition</code> <code>Object</code> property definition received from loopback entityClass eg. <code>{ id: { type: \"Number\", id: true } }</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_24","title":"Returns","text":"<p><code>ModelAttributes</code>&lt;<code>SequelizeModel</code>, <code>any</code>&gt;</p> <p>model attributes supported in sequelize model definiotion</p> <p>TODO: Verify all possible loopback types https://loopback.io/doc/en/lb4/LoopBack-types.html</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_33","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:815</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#getsequelizeoperator","title":"getSequelizeOperator","text":"<p>\u25b8 <code>Protected</code> getSequelizeOperator(<code>key</code>): <code>symbol</code></p> <p>Get Sequelize Operator</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_25","title":"Parameters","text":"Name Type Description <code>key</code> <code>Operators</code> Name of the operator used in loopback eg. lt"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_25","title":"Returns","text":"<p><code>symbol</code></p> <p>Equivalent operator symbol if available in Sequelize eg <code>Op.lt</code></p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_34","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:403</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#gettablename","title":"getTableName","text":"<p>\u25b8 getTableName(<code>entityClass?</code>): <code>string</code></p> <p>This function retrieves the table name associated with a given entity class. Different loopback connectors have different conventions for picking up table names, unless the name is specified in the</p> <p><code>Model</code></p> <p>decorator.</p> <p>The function follows the following cases to determine the table name: - It checks if the name property is specified in the</p> <p><code>Model</code></p> <p>decorator and uses it. (this takes precedence over all other cases) - If the dialect of the dataSource is PostgreSQL, it uses the lowercased version of the model class name. - If the dialect is MySQL or any other dialect, it uses the default model class name.</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_26","title":"Parameters","text":"Name Type Description <code>entityClass</code> typeof <code>Entity</code> &amp; { <code>prototype</code>: <code>T</code>  } The entity class for which the table name is being retrieved."},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_26","title":"Returns","text":"<p><code>string</code></p> <ul> <li>The table name associated with the entity class. Which is used when performing the query.</li> </ul>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_35","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:771</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#includereferencesifrequested","title":"includeReferencesIfRequested","text":"<p>\u25b8 <code>Protected</code> includeReferencesIfRequested(<code>parentEntities</code>, <code>parentEntityClass</code>, <code>inclusionFilters?</code>): <code>Promise</code>&lt;<code>T</code> &amp; <code>Relations</code>[]&gt;</p> <p>Include related entities of <code>@referencesMany</code> relation</p> <p>referencesMany relation is NOT handled by <code>sequelizeModel.findAll</code> as it doesn't have any direct alternative to it, so to include relation data of referencesMany, we're manually fetching related data requested</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_27","title":"Parameters","text":"Name Type Description <code>parentEntities</code> <code>Model</code>&lt;<code>T</code>, <code>T</code>&gt;[] source table data <code>parentEntityClass</code> typeof <code>Entity</code> loopback entity class for the parent entity <code>inclusionFilters?</code> <code>InclusionFilter</code>[] -"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_27","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code> &amp; <code>Relations</code>[]&gt;</p> <p>entities with related models in them</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_36","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:969</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#isinclusionallowed","title":"isInclusionAllowed","text":"<p>\u25b8 <code>Protected</code> isInclusionAllowed(<code>include</code>): <code>boolean</code></p> <p>Checks if the resolver of the inclusion relation is registered in the inclusionResolver of the current repository</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_28","title":"Parameters","text":"Name Type Description <code>include</code> <code>InclusionFilter</code> LoopBack Inclusion filter"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_28","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_37","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:489</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#registerinclusionresolver","title":"registerInclusionResolver","text":"<p>\u25b8 registerInclusionResolver(<code>relationName</code>, <code>resolver</code>): <code>void</code></p> <p>Register an inclusion resolver for the related model name.</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_29","title":"Parameters","text":"Name Type Description <code>relationName</code> <code>string</code> Name of the relation defined on the source model <code>resolver</code> <code>InclusionResolver</code>&lt;<code>T</code>, <code>Entity</code>&gt; Resolver function for getting related model entities"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_29","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_38","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:1187</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#replacebyid","title":"replaceById","text":"<p>\u25b8 replaceById(<code>id</code>, <code>data</code>, <code>options?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_30","title":"Parameters","text":"Name Type <code>id</code> <code>ID</code> <code>data</code> <code>DataObject</code>&lt;<code>T</code>&gt; <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_30","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_12","title":"Implementation of","text":"<p>EntityCrudRepository.replaceById</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_39","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:305</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#save","title":"save","text":"<p>\u25b8 save(<code>entity</code>, <code>options?</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_31","title":"Parameters","text":"Name Type <code>entity</code> <code>T</code> <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_31","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_13","title":"Implementation of","text":"<p>EntityCrudRepository.save</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_40","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:179</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#syncloadedsequelizemodels","title":"syncLoadedSequelizeModels","text":"<p>\u25b8 syncLoadedSequelizeModels(<code>options?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Run CREATE TABLE query for the all sequelize models, Useful for quick testing</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_32","title":"Parameters","text":"Name Type Description <code>options</code> <code>SyncOptions</code> Sequelize Sync Options"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_32","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_41","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:804</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#syncsequelizemodel","title":"syncSequelizeModel","text":"<p>\u25b8 syncSequelizeModel(<code>options?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Run CREATE TABLE query for the target sequelize model, Useful for quick testing</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_33","title":"Parameters","text":"Name Type Description <code>options</code> <code>SyncOptions</code> Sequelize Sync Options"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_33","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_42","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:789</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#toentities","title":"toEntities","text":"<p>\u25b8 <code>Protected</code> toEntities(<code>models</code>): <code>T</code>[]</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_34","title":"Parameters","text":"Name Type <code>models</code> <code>Model</code>&lt;<code>T</code>, <code>T</code>&gt;[]"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_34","title":"Returns","text":"<p><code>T</code>[]</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_43","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:394</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#update","title":"update","text":"<p>\u25b8 update(<code>entity</code>, <code>options?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_35","title":"Parameters","text":"Name Type <code>entity</code> <code>T</code> <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_35","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_14","title":"Implementation of","text":"<p>EntityCrudRepository.update</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_44","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:189</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#updateall","title":"updateAll","text":"<p>\u25b8 updateAll(<code>data</code>, <code>where?</code>, <code>options?</code>): <code>Promise</code>&lt;<code>Count</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_36","title":"Parameters","text":"Name Type <code>data</code> <code>DataObject</code>&lt;<code>T</code>&gt; <code>where?</code> <code>Where</code>&lt;<code>T</code>&gt; <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_36","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Count</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_15","title":"Implementation of","text":"<p>EntityCrudRepository.updateAll</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_45","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:210</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#updatebyid","title":"updateById","text":"<p>\u25b8 updateById(<code>id</code>, <code>data</code>, <code>options?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#parameters_37","title":"Parameters","text":"Name Type <code>id</code> <code>ID</code> <code>data</code> <code>DataObject</code>&lt;<code>T</code>&gt; <code>options?</code> <code>AnyObject</code>"},{"location":"api-reference/classes/SequelizeCrudRepository/#returns_37","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#implementation-of_16","title":"Implementation of","text":"<p>EntityCrudRepository.updateById</p>"},{"location":"api-reference/classes/SequelizeCrudRepository/#defined-in_46","title":"Defined in","text":"<p>src/sequelize/sequelize.repository.base.ts:193</p>"},{"location":"api-reference/classes/SequelizeDataSource/","title":"SequelizeDataSource","text":"<p>loopback4-sequelize / SequelizeDataSource</p>"},{"location":"api-reference/classes/SequelizeDataSource/#class-sequelizedatasource","title":"Class: SequelizeDataSource","text":"<p>Sequelize DataSource Class</p>"},{"location":"api-reference/classes/SequelizeDataSource/#implements","title":"Implements","text":"<ul> <li><code>LifeCycleObserver</code></li> </ul>"},{"location":"api-reference/classes/SequelizeDataSource/#table-of-contents","title":"Table of contents","text":""},{"location":"api-reference/classes/SequelizeDataSource/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"api-reference/classes/SequelizeDataSource/#properties","title":"Properties","text":"<ul> <li>config</li> <li>name</li> <li>sequelize</li> <li>sequelizeConfig</li> <li>settings</li> </ul>"},{"location":"api-reference/classes/SequelizeDataSource/#methods","title":"Methods","text":"<ul> <li>automigrate</li> <li>autoupdate</li> <li>beginTransaction</li> <li>execute</li> <li>getPoolOptions</li> <li>init</li> <li>start</li> <li>stop</li> </ul>"},{"location":"api-reference/classes/SequelizeDataSource/#constructors_1","title":"Constructors","text":""},{"location":"api-reference/classes/SequelizeDataSource/#constructor","title":"constructor","text":"<p>\u2022 new SequelizeDataSource(<code>config</code>)</p>"},{"location":"api-reference/classes/SequelizeDataSource/#parameters","title":"Parameters","text":"Name Type <code>config</code> <code>SequelizeDataSourceConfig</code>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:37</p>"},{"location":"api-reference/classes/SequelizeDataSource/#properties_1","title":"Properties","text":""},{"location":"api-reference/classes/SequelizeDataSource/#config","title":"config","text":"<p>\u2022 config: <code>SequelizeDataSourceConfig</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_1","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:37</p>"},{"location":"api-reference/classes/SequelizeDataSource/#name","title":"name","text":"<p>\u2022 name: <code>string</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_2","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:35</p>"},{"location":"api-reference/classes/SequelizeDataSource/#sequelize","title":"sequelize","text":"<p>\u2022 <code>Optional</code> sequelize: <code>Sequelize</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_3","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:50</p>"},{"location":"api-reference/classes/SequelizeDataSource/#sequelizeconfig","title":"sequelizeConfig","text":"<p>\u2022 sequelizeConfig: <code>Options</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_4","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:51</p>"},{"location":"api-reference/classes/SequelizeDataSource/#settings","title":"settings","text":"<p>\u2022 settings: <code>Object</code> = <code>{}</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_5","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:36</p>"},{"location":"api-reference/classes/SequelizeDataSource/#methods_1","title":"Methods","text":""},{"location":"api-reference/classes/SequelizeDataSource/#automigrate","title":"automigrate","text":"<p>\u25b8 automigrate(): <code>void</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_6","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:94</p>"},{"location":"api-reference/classes/SequelizeDataSource/#autoupdate","title":"autoupdate","text":"<p>\u25b8 autoupdate(): <code>void</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_7","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:99</p>"},{"location":"api-reference/classes/SequelizeDataSource/#begintransaction","title":"beginTransaction","text":"<p>\u25b8 beginTransaction(<code>options?</code>): <code>Promise</code>&lt;<code>Transaction</code>&gt;</p> <p>Begin a new transaction.</p>"},{"location":"api-reference/classes/SequelizeDataSource/#parameters_1","title":"Parameters","text":"Name Type Description <code>options?</code> <code>TransactionOptions</code> | <code>ISOLATION_LEVELS</code> Options {isolationLevel: '...'}"},{"location":"api-reference/classes/SequelizeDataSource/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Transaction</code>&gt;</p> <p>A promise which resolves to a Sequelize Transaction object</p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_8","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:111</p>"},{"location":"api-reference/classes/SequelizeDataSource/#execute","title":"execute","text":"<p>\u25b8 execute(<code>command</code>, <code>parameters?</code>, <code>options?</code>): <code>Promise</code>&lt;<code>AnyObject</code>&gt;</p> <p>Execute a SQL command.</p> <p>WARNING: In general, it is always better to perform database actions through repository methods. Directly executing SQL may lead to unexpected results, corrupted data, security vulnerabilities and other issues.</p> <p><code>Example</code></p> <pre><code>// MySQL\nconst result = await repo.execute(\n'SELECT * FROM Products WHERE size &gt; ?',\n[42]\n);\n// PostgreSQL\nconst result = await repo.execute(\n'SELECT * FROM Products WHERE size &gt; $1',\n[42]\n);\n</code></pre>"},{"location":"api-reference/classes/SequelizeDataSource/#parameters_2","title":"Parameters","text":"Name Type Description <code>command</code> <code>Command</code> A parameterized SQL command or query. <code>parameters?</code> <code>AnyObject</code> | <code>PositionalParameters</code> List of parameter values to use. <code>options?</code> <code>AnyObject</code> Additional options, for example <code>transaction</code>."},{"location":"api-reference/classes/SequelizeDataSource/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>AnyObject</code>&gt;</p> <p>A promise which resolves to the command output. The output type (data structure) is database specific and often depends on the command executed.</p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_9","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:166</p>"},{"location":"api-reference/classes/SequelizeDataSource/#getpooloptions","title":"getPoolOptions","text":"<p>\u25b8 getPoolOptions(): <code>undefined</code> | <code>PoolOptions</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#returns_4","title":"Returns","text":"<p><code>undefined</code> | <code>PoolOptions</code></p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_10","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:212</p>"},{"location":"api-reference/classes/SequelizeDataSource/#init","title":"init","text":"<p>\u25b8 init(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeDataSource/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeDataSource/#implementation-of","title":"Implementation of","text":"<p>LifeCycleObserver.init</p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_11","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:52</p>"},{"location":"api-reference/classes/SequelizeDataSource/#start","title":"start","text":"<p>\u25b8 start(<code>..._injectedArgs</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeDataSource/#parameters_3","title":"Parameters","text":"Name Type <code>..._injectedArgs</code> <code>unknown</code>[]"},{"location":"api-reference/classes/SequelizeDataSource/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeDataSource/#implementation-of_1","title":"Implementation of","text":"<p>LifeCycleObserver.start</p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_12","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:89</p>"},{"location":"api-reference/classes/SequelizeDataSource/#stop","title":"stop","text":"<p>\u25b8 stop(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeDataSource/#returns_7","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/SequelizeDataSource/#implementation-of_2","title":"Implementation of","text":"<p>LifeCycleObserver.stop</p>"},{"location":"api-reference/classes/SequelizeDataSource/#defined-in_13","title":"Defined in","text":"<p>src/sequelize/sequelize.datasource.base.ts:90</p>"},{"location":"api-reference/classes/Transaction-1/","title":"Transaction 1","text":"<p>loopback4-sequelize / Transaction</p>"},{"location":"api-reference/classes/Transaction-1/#class-transaction","title":"Class: Transaction","text":"<p>The transaction object is used to identify a running transaction. It is created by calling <code>Sequelize.transaction()</code>.</p> <p>To run a query under a transaction, you should pass the transaction in the options object.</p>"},{"location":"api-reference/classes/Transaction-1/#table-of-contents","title":"Table of contents","text":""},{"location":"api-reference/classes/Transaction-1/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"api-reference/classes/Transaction-1/#accessors","title":"Accessors","text":"<ul> <li>LOCK</li> <li>LOCK</li> </ul>"},{"location":"api-reference/classes/Transaction-1/#methods","title":"Methods","text":"<ul> <li>afterCommit</li> <li>commit</li> <li>rollback</li> </ul>"},{"location":"api-reference/classes/Transaction-1/#constructors_1","title":"Constructors","text":""},{"location":"api-reference/classes/Transaction-1/#constructor","title":"constructor","text":"<p>\u2022 new Transaction(<code>sequelize</code>, <code>options</code>)</p>"},{"location":"api-reference/classes/Transaction-1/#parameters","title":"Parameters","text":"Name Type <code>sequelize</code> <code>Sequelize</code> <code>options</code> <code>TransactionOptions</code>"},{"location":"api-reference/classes/Transaction-1/#defined-in","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:12</p>"},{"location":"api-reference/classes/Transaction-1/#accessors_1","title":"Accessors","text":""},{"location":"api-reference/classes/Transaction-1/#lock","title":"LOCK","text":"<p>\u2022 <code>get</code> LOCK(): <code>LOCK</code></p> <p>Same as its static version, but can also be called on instances of transactions to get possible options for row locking directly from the instance.</p>"},{"location":"api-reference/classes/Transaction-1/#returns","title":"Returns","text":"<p><code>LOCK</code></p>"},{"location":"api-reference/classes/Transaction-1/#defined-in_1","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:39</p>"},{"location":"api-reference/classes/Transaction-1/#lock_1","title":"LOCK","text":"<p>\u2022 <code>Static</code> <code>get</code> LOCK(): <code>LOCK</code></p> <p>Returns possible options for row locking</p>"},{"location":"api-reference/classes/Transaction-1/#returns_1","title":"Returns","text":"<p><code>LOCK</code></p>"},{"location":"api-reference/classes/Transaction-1/#defined-in_2","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:32</p>"},{"location":"api-reference/classes/Transaction-1/#methods_1","title":"Methods","text":""},{"location":"api-reference/classes/Transaction-1/#aftercommit","title":"afterCommit","text":"<p>\u25b8 afterCommit(<code>fn</code>): <code>void</code></p> <p>Adds hook that is run after a transaction is committed</p>"},{"location":"api-reference/classes/Transaction-1/#parameters_1","title":"Parameters","text":"Name Type <code>fn</code> (<code>transaction</code>: <code>Transaction</code>) =&gt; <code>void</code> | <code>Promise</code>&lt;<code>void</code>&gt;"},{"location":"api-reference/classes/Transaction-1/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api-reference/classes/Transaction-1/#defined-in_3","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:27</p>"},{"location":"api-reference/classes/Transaction-1/#commit","title":"commit","text":"<p>\u25b8 commit(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Commit the transaction</p>"},{"location":"api-reference/classes/Transaction-1/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/Transaction-1/#defined-in_4","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:17</p>"},{"location":"api-reference/classes/Transaction-1/#rollback","title":"rollback","text":"<p>\u25b8 rollback(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Rollback (abort) the transaction</p>"},{"location":"api-reference/classes/Transaction-1/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"api-reference/classes/Transaction-1/#defined-in_5","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:22</p>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/","title":"Transaction.ISOLATION LEVELS","text":"<p>loopback4-sequelize / Transaction / ISOLATION_LEVELS</p>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#enumeration-isolation_levels","title":"Enumeration: ISOLATION_LEVELS","text":"<p>Transaction.ISOLATION_LEVELS</p> <p>Isolations levels can be set per-transaction by passing <code>options.isolationLevel</code> to <code>sequelize.transaction</code>. Default to <code>REPEATABLE_READ</code> but you can override the default isolation level by passing <code>options.isolationLevel</code> in <code>new Sequelize</code>.</p> <p>The possible isolations levels to use when starting a transaction:</p> <pre><code>{\nREAD_UNCOMMITTED: \"READ UNCOMMITTED\",\nREAD_COMMITTED: \"READ COMMITTED\",\nREPEATABLE_READ: \"REPEATABLE READ\",\nSERIALIZABLE: \"SERIALIZABLE\"\n}\n</code></pre> <p>Pass in the desired level as the first argument:</p> <pre><code>try {\nawait sequelize.transaction({isolationLevel: Sequelize.Transaction.SERIALIZABLE}, transaction =&gt; {\n// your transactions\n});\n// transaction has been committed. Do something after the commit if required.\n} catch(err) {\n// do something with the err.\n}\n</code></pre>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#table-of-contents","title":"Table of contents","text":""},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#enumeration-members","title":"Enumeration Members","text":"<ul> <li>READ_COMMITTED</li> <li>READ_UNCOMMITTED</li> <li>REPEATABLE_READ</li> <li>SERIALIZABLE</li> </ul>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#enumeration-members_1","title":"Enumeration Members","text":""},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#read_committed","title":"READ_COMMITTED","text":"<p>\u2022 READ_COMMITTED = <code>\"READ COMMITTED\"</code></p>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#defined-in","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:74</p>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#read_uncommitted","title":"READ_UNCOMMITTED","text":"<p>\u2022 READ_UNCOMMITTED = <code>\"READ UNCOMMITTED\"</code></p>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#defined-in_1","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:73</p>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#repeatable_read","title":"REPEATABLE_READ","text":"<p>\u2022 REPEATABLE_READ = <code>\"REPEATABLE READ\"</code></p>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#defined-in_2","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:75</p>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#serializable","title":"SERIALIZABLE","text":"<p>\u2022 SERIALIZABLE = <code>\"SERIALIZABLE\"</code></p>"},{"location":"api-reference/enums/Transaction.ISOLATION_LEVELS/#defined-in_3","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:76</p>"},{"location":"api-reference/enums/Transaction.TYPES/","title":"Transaction.TYPES","text":"<p>loopback4-sequelize / Transaction / TYPES</p>"},{"location":"api-reference/enums/Transaction.TYPES/#enumeration-types","title":"Enumeration: TYPES","text":"<p>Transaction.TYPES</p>"},{"location":"api-reference/enums/Transaction.TYPES/#table-of-contents","title":"Table of contents","text":""},{"location":"api-reference/enums/Transaction.TYPES/#enumeration-members","title":"Enumeration Members","text":"<ul> <li>DEFERRED</li> <li>EXCLUSIVE</li> <li>IMMEDIATE</li> </ul>"},{"location":"api-reference/enums/Transaction.TYPES/#enumeration-members_1","title":"Enumeration Members","text":""},{"location":"api-reference/enums/Transaction.TYPES/#deferred","title":"DEFERRED","text":"<p>\u2022 DEFERRED = <code>\"DEFERRED\"</code></p>"},{"location":"api-reference/enums/Transaction.TYPES/#defined-in","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:80</p>"},{"location":"api-reference/enums/Transaction.TYPES/#exclusive","title":"EXCLUSIVE","text":"<p>\u2022 EXCLUSIVE = <code>\"EXCLUSIVE\"</code></p>"},{"location":"api-reference/enums/Transaction.TYPES/#defined-in_1","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:82</p>"},{"location":"api-reference/enums/Transaction.TYPES/#immediate","title":"IMMEDIATE","text":"<p>\u2022 IMMEDIATE = <code>\"IMMEDIATE\"</code></p>"},{"location":"api-reference/enums/Transaction.TYPES/#defined-in_2","title":"Defined in","text":"<p>node_modules/sequelize/types/transaction.d.ts:81</p>"},{"location":"api-reference/interfaces/LB4SequelizeComponentOptions/","title":"LB4SequelizeComponentOptions","text":"<p>loopback4-sequelize / LB4SequelizeComponentOptions</p>"},{"location":"api-reference/interfaces/LB4SequelizeComponentOptions/#interface-lb4sequelizecomponentoptions","title":"Interface: LB4SequelizeComponentOptions","text":"<p>Interface defining the component's options object</p>"},{"location":"api-reference/modules/LB4SequelizeComponentBindings/","title":"LB4SequelizeComponentBindings","text":"<p>loopback4-sequelize / LB4SequelizeComponentBindings</p>"},{"location":"api-reference/modules/LB4SequelizeComponentBindings/#namespace-lb4sequelizecomponentbindings","title":"Namespace: LB4SequelizeComponentBindings","text":"<p>Binding keys used by this component.</p>"},{"location":"api-reference/modules/LB4SequelizeComponentBindings/#table-of-contents","title":"Table of contents","text":""},{"location":"api-reference/modules/LB4SequelizeComponentBindings/#variables","title":"Variables","text":"<ul> <li>COMPONENT</li> </ul>"},{"location":"api-reference/modules/LB4SequelizeComponentBindings/#variables_1","title":"Variables","text":""},{"location":"api-reference/modules/LB4SequelizeComponentBindings/#component","title":"COMPONENT","text":"<p>\u2022 <code>Const</code> COMPONENT: <code>BindingKey</code>&lt;<code>LB4SequelizeComponent</code>&gt;</p>"},{"location":"api-reference/modules/LB4SequelizeComponentBindings/#defined-in","title":"Defined in","text":"<p>src/keys.ts:8</p>"},{"location":"api-reference/modules/Transaction/","title":"Transaction","text":"<p>loopback4-sequelize / Transaction</p>"},{"location":"api-reference/modules/Transaction/#namespace-transaction","title":"Namespace: Transaction","text":"<p>Sequelize Transaction type</p>"},{"location":"api-reference/modules/Transaction/#table-of-contents","title":"Table of contents","text":""},{"location":"api-reference/modules/Transaction/#enumerations","title":"Enumerations","text":"<ul> <li>ISOLATION_LEVELS</li> <li>TYPES</li> </ul>"},{"location":"tutorial/","title":"Basics","text":"<p>Both newly developed and existing projects can benefit from the extension by simply changing the parent classes in the target Data Source and Repositories.</p>"},{"location":"tutorial/#step-1-configure-datasource","title":"Step 1: Configure DataSource","text":"<p>Change the parent class from <code>juggler.DataSource</code> to <code>SequelizeDataSource</code> like below.</p> pg.datasource.ts<pre><code>// ...\nimport {SequelizeDataSource} from 'loopback4-sequelize';\n// ...\nexport class PgDataSource\nextends SequelizeDataSource\nimplements LifeCycleObserver {\n// ...\n}\n</code></pre> <p><code>SequelizeDataSource</code> accepts commonly used config in the same way as loopback did. So in most cases you won't need to change your existing configuration. But if you want to use sequelize specific options pass them in <code>sequelizeOptions</code> like below:</p> <pre><code>let config = {\nname: 'db',\nconnector: 'postgresql',\nsequelizeOptions: {\nusername: 'postgres',\npassword: 'secret',\ndialectOptions: {\nssl: {\nrejectUnauthorized: false,\nca: fs.readFileSync('/path/to/root.crt').toString(),\n},\n},\n},\n};\n</code></pre> <p>Note: Options provided in <code>sequelizeOptions</code> will take priority over others, For eg. if you have password specified in both <code>config.password</code> and <code>config.password.sequelizeOptions</code> the latter one will be used.</p>"},{"location":"tutorial/#step-2-configure-repository","title":"Step 2: Configure Repository","text":"<p>Change the parent class from <code>DefaultCrudRepository</code> to <code>SequelizeCrudRepository</code> like below.</p> your.repository.ts<pre><code>// ...\nimport {SequelizeCrudRepository} from 'loopback4-sequelize';\nexport class YourRepository extends SequelizeCrudRepository&lt;\nYourModel,\ntypeof YourModel.prototype.id,\nYourModelRelations\n&gt; {\n// ...\n}\n</code></pre>"},{"location":"tutorial/#relations","title":"Relations","text":""},{"location":"tutorial/#supported-loopback-relations","title":"Supported Loopback Relations","text":"<p>With <code>SequelizeCrudRepository</code>, you can utilize following relations without any additional configuration:</p> <ol> <li>HasMany Relation</li> <li>BelongsTo Relation</li> <li>HasOne Relation</li> <li>HasManyThrough Relation</li> <li>ReferencesMany Relation</li> </ol> <p>The default relation configuration, generated using the lb4 relation command (i.e. inclusion resolvers in the repository and property decorators in the model), remain unchanged.</p>"},{"location":"tutorial/#inner-join","title":"INNER JOIN","text":"<p>Check the demo video of using inner joins here: https://youtu.be/ZrUxIk63oRc?t=76</p> <p>When using <code>SequelizeCrudRepository</code>, the <code>find()</code>, <code>findOne()</code>, and <code>findById()</code> methods accept a new option called <code>required</code> in the include filter. Setting this option to <code>true</code> will result in an inner join query that explicitly requires the specified condition for the child model. If the row does not meet this condition, it will not be fetched and returned.</p> <p>An example of the filter object might look like this to fetch the books who contains \"Art\" in their title, which belongs to category \"Programming\":</p> <pre><code>{\n\"where\": {\"title\": {\"like\": \"%Art%\"}},\n\"include\": [\n{\n\"relation\": \"category\",\n\"scope\": {\n\"where\": {\n\"name\": \"Programming\"\n}\n},\n\"required\": true // \ud83d\udc48\n}\n]\n}\n</code></pre>"},{"location":"tutorial/#sql-transactions","title":"SQL Transactions","text":"<p>A Sequelize repository can perform operations in a transaction using the <code>beginTransaction()</code> method.</p>"},{"location":"tutorial/#isolation-levels","title":"Isolation levels","text":"<p>When you call <code>beginTransaction()</code>, you can optionally specify a transaction isolation level. It support the following isolation levels:</p> <ul> <li><code>Transaction.ISOLATION_LEVELS.READ_UNCOMMITTED</code> (default)</li> <li><code>Transaction.ISOLATION_LEVELS.READ_COMMITTED</code></li> <li><code>Transaction.ISOLATION_LEVELS.REPEATABLE_READ</code></li> <li><code>Transaction.ISOLATION_LEVELS.SERIALIZABLE</code></li> </ul>"},{"location":"tutorial/#options","title":"Options","text":"<p>Following are the supported options:</p> <pre><code>{\nautocommit?: boolean;\nisolationLevel?: Transaction.ISOLATION_LEVELS;\ntype?: Transaction.TYPES;\ndeferrable?: string | Deferrable;\n/**\n   * Parent transaction.\n   */\ntransaction?: Transaction | null;\n}\n</code></pre>"},{"location":"tutorial/#example","title":"Example","text":"<pre><code>// Get repository instances. In a typical application, instances are injected\n// via dependency injection using `@repository` decorator.\nconst userRepo = await app.getRepository(UserRepository);\n// Begin a new transaction.\n// It's also possible to call `userRepo.dataSource.beginTransaction` instead.\nconst tx = await userRepo.beginTransaction({\nisolationLevel: Transaction.ISOLATION_LEVELS.SERIALIZABLE,\n});\ntry {\n// Then, we do some calls passing this transaction as an option:\nconst user = await userRepo.create(\n{\nfirstName: 'Jon',\nlastName: 'Doe',\n},\n{transaction: tx},\n);\nawait userRepo.updateById(\nuser.id,\n{\nfirstName: 'John',\n},\n{transaction: tx},\n);\n// If the execution reaches this line, no errors were thrown.\n// We commit the transaction.\nawait tx.commit();\n} catch (error) {\n// If the execution reaches this line, an error was thrown.\n// We rollback the transaction.\nawait tx.rollback();\n}\n</code></pre> <p>Switching from loopback defaults to sequelize transaction is as simple as this commit in loopback4-sequelize-transaction-example.</p>"}]}